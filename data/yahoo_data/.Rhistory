if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
aapl <- getSymbols("AAPL", src = "yahoo", from = start, to = end)
start <- as.Date("2007-01-01")
end <- as.Date("2009-10-01")
start <- as.Date("2007-01-01")
end <- as.Date("2009-01-01")
aapl <- getSymbols("AAPL", src = "yahoo", from = start, to = end)
aapl <- getSymbols("GOOG", src = "yahoo", from = start, to = end)
n_tickers <- length(tickers)
tickers <- c('XOM','MSFT','GE','IBM','CVX','JNJ','PG','WMT','BAC','GOOG')
n_tickers <- length(tickers)
aapl <- getSymbols(c("AAPL",'IBM'), src = "yahoo", from = start, to = end)
head(aapl)
aapl
aapl$Data
tickers_res <- getSymbols(tickers, src = "yahoo", from = start, to = end)
aapl <- getSymbols(tickers[i], src = "yahoo", from = start, to = end)
for(i in 1:n_tickers){
aapl <- getSymbols(tickers[i], src = "yahoo", from = start, to = end)
}
aapl
head(AAPL)
getSymbols(tickers, src = "yahoo", from = start, to = end)
series <- list(XOM,MSFT,GE,IBM,CVX,JNJ,PG,WMT,BAC,GOOG)
row.names(AAPL)
index(AAPL)
index(AAPL)==index(XOM)
all(index(AAPL)==index(XOM))
series_lst <- list(XOM,MSFT,GE,IBM,CVX,JNJ,PG,WMT,BAC,GOOG)
index_test <- series_lst[[1]]
index_test
index_test <- index(series_lst[[1]])
index_test
index_test <- index(series_lst[[1]])
for(i in 2:n_tickers){
all(index_test==index(series_lst[[i]]))
}
res <- rep(NA,n_tickers)
for(i in 2:n_tickers){
res[i] <- all(index_test==index(series_lst[[i]]))
}
res
require('rugarch')
prices = series_lst[[i]]
logp = log(prices)
logreturns = diff(logp)
logreturns
?getSymbols
series_lst[[1]]
col.names(series_lst[[1]])
column.names(series_lst[[1]])
names(series_lst[[1]])
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
series
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
head(series)
series$Close
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
prices <- series$Close
logp = log(prices)
logreturns = diff(logp)
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
ugspec = ugarchspec(distribution.model = "sstd")
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
min(logreturns)
logreturns
head(logreturns)
head(logreturns[2:300])
length(prices)
logreturns = diff(logp)[2:length(prices)]
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
#print(fit)
u = pit(fit)
Xnew = qnorm(u)
shapiro.test(as.numeric(Xnew))$p.value
shapResult = rep(NA,1,N)
shapResult = rep(NA,1,n_tickers)
for(i in 1:n_tickers){
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
prices <- series$Close
logp = log(prices)
logreturns = diff(logp)[2:length(prices)]
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
#print(fit)
u = pit(fit)
Xnew = qnorm(u)
shapResult[i] = shapiro.test(as.numeric(Xnew))$p.value
X = merge(X,Xnew,all=c(T,T))
}
shapResult = rep(NA,1,n_tickers)
for(i in 1:n_tickers){
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
prices <- series$Close
logp = log(prices)
logreturns = diff(logp)[2:length(prices)]
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
#print(fit)
u = pit(fit)
Xnew = qnorm(u)
shapResult[i] = shapiro.test(as.numeric(Xnew))$p.value
#X = merge(X,Xnew,all=c(T,T))
}
shapResult
u
histogram(u)
hist(u)
n_dates <- length(index_test)
n_dates
Xnew
# get the PITs for each of the time series
ugspec = ugarchspec(distribution.model = "sstd")
shapResult = rep(NA,1,n_tickers)
X_mat <- matrix(NA,n_dates,n_tickers)
for(i in 1:n_tickers){
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
prices <- series$Close
logp = log(prices)
logreturns = diff(logp)[2:length(prices)]
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
#print(fit)
u = pit(fit)
Xnew = qnorm(u)
shapResult[i] = shapiro.test(as.numeric(Xnew))$p.value
X_mat[,i] <- Xnew
}
X_mat <- matrix(NA,n_dates-1,n_tickers)
for(i in 1:n_tickers){
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
prices <- series$Close
logp = log(prices)
logreturns = diff(logp)[2:length(prices)]
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
#print(fit)
u = pit(fit)
Xnew = qnorm(u)
shapResult[i] = shapiro.test(as.numeric(Xnew))$p.value
X_mat[,i] <- Xnew
}
histogram(X_mat[,1])
hist(X_mat[,1])
hist(X_mat[,2])
hist(X_mat[,3])
hist(X_mat[,4])
hist(rnorm(500))
hist(rnorm(500))
hist(rnorm(500))
hist(rnorm(500))
hist(rnorm(500))
hist(rnorm(500))
hist(rnorm(500))
hist(rnorm(500))
filename <- paste('largestocks2007', ".mat", sep = "")
filename
writeMat(filename, X_mat=X_mat)
index_test[[194]]
index_test[[200]]
index_test[[214]]
index_test[[215]]
index_test[[260]]
index_test[[318]]
index_test[[433]]
index_test[[187]]
index_test[[344]]
index_test[[320]]
index_test[[266]]
index_test[[316]]
index_test[[22]]
index_test[[214]]
index_test[[258]]
index_test[[266]]
index_test[[319]]
index_test[[333]]
index_test[[430]]
library(R.matlab)
library(grid)
library(ggplot2)
library(latex2exp)
library(coda)
setmytheme <- function(){
theme_set(theme_bw())
theme_update(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 25, margin=margin(20,0,0,0)),
axis.title.y = element_text(size = 25, angle = 90, margin = margin(0,20,0,0)),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
title = element_text(size = 30),
strip.text = element_text(size = 25),
strip.background = element_rect(fill="white"),
panel.margin = unit(2, "lines"),
legend.position = "bottom")
}
setmytheme()
# plot the distribution of tau n=5 and the number of changepoints against value of pGeo
n <- 5
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
setwd("~/Dropbox/copula_changepoint/code_git/copula_changepoint/experiments/posterior_concentration")
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
tau_collect <- mat_res$tau.collect
tau_collect <- tau_collect[2:length(tau_collect)]
M <- sum(tau_collect==0)
M
tau_collect <- mat_res$tau.collect
# tau_collect <- tau_collect[2:length(tau_collect)]
M <- sum(tau_collect==0)
get_num_cp <- function(tau_collect){
tau_collect_start_indx <- 1
segment_length <- rep(NA,sum(tau_collect==0))
for(i in 1:sum(tau_collect==0)){
segment_length[i] <- which(tau_collect[(tau_collect_start_indx):length(tau_collect)]==0)[1]
tau_collect_start_indx <- segment_length[i]+tau_collect_start_indx
}
segment_length <- segment_length-1
return(segment_length)
}
n_cp <- get_num_cp(tau_collect)
plot_df <- data.frame(n_cp=n_cp[2:M],pGeo=mat_res$pGeo.collect[1,1:(M-1)])
g <- ggplot(data=plot_df) +
geom_point(aes(x=n_cp,y=pGeo),alpha=0.1) +
xlab(TeX('$|\\tau_{1:K}|$')) +
ylab(TeX('$p_G$'))
g
ggsave(sprintf('numcpvspG%i.pdf',n),plot=g,width=7,height=5)
plot_df <- data.frame(tau=tau_collect[tau_collect>0])
g <- ggplot(data=plot_df) +
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
ggsave(sprintf('posterior_concentration_n%i.pdf',n),plot=g,width=7,height=5)
# plot the distribution of tau n=5
n <- 10
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
tau_collect <- mat_res$tau.collect
tau_collect <- tau_collect[tau_collect<100]
plot_df <- data.frame(tau=tau_collect[tau_collect>0])
g <- ggplot(data=plot_df) +
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
ggsave(sprintf('posterior_concentration_n%i.pdf',n),plot=g,width=7,height=5)
# plot the distribution of tau n=5
n <- 15
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
tau_collect <- mat_res$tau.collect
tau_collect <- tau_collect[tau_collect<100]
plot_df <- data.frame(tau=tau_collect[tau_collect>0])
g <- ggplot(data=plot_df) +
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
g <- ggplot(data=plot_df) +
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$')) +
geom_vline(xintercept = 20)
g
g <- ggplot(data=plot_df) +
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$')) +
geom_vline(xintercept = 20,color='blue')
g
g <- ggplot(data=plot_df) +
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$')) +
geom_vline(xintercept = 20,color='blue') +
geom_vline(xintercept = 40,color='blue') +
geom_vline(xintercept = 60,color='blue') +
geom_vline(xintercept = 80,color='blue')
g
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue') +
geom_vline(xintercept = 40,color='blue') +
geom_vline(xintercept = 60,color='blue') +
geom_vline(xintercept = 80,color='blue')+
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue',alpha=0.3) +
geom_vline(xintercept = 40,color='blue',alpha=0.3) +
geom_vline(xintercept = 60,color='blue',alpha=0.3) +
geom_vline(xintercept = 80,color='blue',alpha=0.3)+
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
# plot the distribution of tau n=5
n <- 10
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
tau_collect <- mat_res$tau.collect
tau_collect <- tau_collect[tau_collect<100]
plot_df <- data.frame(tau=tau_collect[tau_collect>0])
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue',alpha=0.3) +
geom_vline(xintercept = 40,color='blue',alpha=0.3) +
geom_vline(xintercept = 60,color='blue',alpha=0.3) +
geom_vline(xintercept = 80,color='blue',alpha=0.3)+
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue',alpha=0.5) +
geom_vline(xintercept = 40,color='blue',alpha=0.5) +
geom_vline(xintercept = 60,color='blue',alpha=0.5) +
geom_vline(xintercept = 80,color='blue',alpha=0.5)+
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
ggsave(sprintf('posterior_concentration_n%i.pdf',n),plot=g,width=7,height=5)
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue',alpha=0.5) +
geom_vline(xintercept = 40,color='blue',alpha=0.5) +
geom_vline(xintercept = 60,color='blue',alpha=0.5) +
geom_vline(xintercept = 80,color='blue',alpha=0.5)+
geom_histogram(aes(x=tau),breaks=1:100) +
scale_x_continuous(breaks = seq(1, 100, 20)) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue',alpha=0.5) +
geom_vline(xintercept = 40,color='blue',alpha=0.5) +
geom_vline(xintercept = 60,color='blue',alpha=0.5) +
geom_vline(xintercept = 80,color='blue',alpha=0.5)+
geom_histogram(aes(x=tau),breaks=1:100) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
# plot the distribution of tau n=5 and the number of changepoints against value of pGeo
n <- 5
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
tau_collect <- mat_res$tau.collect
# tau_collect <- tau_collect[2:length(tau_collect)]
M <- sum(tau_collect==0)
get_num_cp <- function(tau_collect){
tau_collect_start_indx <- 1
segment_length <- rep(NA,sum(tau_collect==0))
for(i in 1:sum(tau_collect==0)){
segment_length[i] <- which(tau_collect[(tau_collect_start_indx):length(tau_collect)]==0)[1]
tau_collect_start_indx <- segment_length[i]+tau_collect_start_indx
}
segment_length <- segment_length-1
return(segment_length)
}
n_cp <- get_num_cp(tau_collect)
plot_df <- data.frame(n_cp=n_cp[2:M],pGeo=mat_res$pGeo.collect[1,1:(M-1)])
g <- ggplot(data=plot_df) +
geom_point(aes(x=n_cp,y=pGeo),alpha=0.1) +
xlab(TeX('$|\\tau_{1:K}|$')) +
ylab(TeX('$p_G$'))
g
ggsave(sprintf('numcpvspG%i.pdf',n),plot=g,width=7,height=5)
plot_df <- data.frame(tau=tau_collect[tau_collect>0])
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue',alpha=0.5) +
geom_vline(xintercept = 40,color='blue',alpha=0.5) +
geom_vline(xintercept = 60,color='blue',alpha=0.5) +
geom_vline(xintercept = 80,color='blue',alpha=0.5)+
scale_x_continuous(breaks = seq(0, 100, 20)) +
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
ggsave(sprintf('posterior_concentration_n%i.pdf',n),plot=g,width=7,height=5)
# plot the distribution of tau n=5
n <- 10
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
tau_collect <- mat_res$tau.collect
tau_collect <- tau_collect[tau_collect<100]
plot_df <- data.frame(tau=tau_collect[tau_collect>0])
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue',alpha=0.5) +
geom_vline(xintercept = 40,color='blue',alpha=0.5) +
geom_vline(xintercept = 60,color='blue',alpha=0.5) +
geom_vline(xintercept = 80,color='blue',alpha=0.5)+
scale_x_continuous(breaks = seq(0, 100, 20)) +
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
ggsave(sprintf('posterior_concentration_n%i.pdf',n),plot=g,width=7,height=5)
# plot the distribution of tau n=5
n <- 15
res_file <- sprintf('posterior_concentration_n%i.mat',n)
mat_res = readMat(res_file)
tau_collect <- mat_res$tau.collect
tau_collect <- tau_collect[tau_collect<100]
plot_df <- data.frame(tau=tau_collect[tau_collect>0])
g <- ggplot(data=plot_df) +
geom_vline(xintercept = 20,color='blue',alpha=0.3) +
geom_vline(xintercept = 40,color='blue',alpha=0.3) +
geom_vline(xintercept = 60,color='blue',alpha=0.3) +
geom_vline(xintercept = 80,color='blue',alpha=0.3)+
geom_histogram(aes(x=tau),breaks=1:100) +
xlab(TeX('$t$')) +
ylab(TeX('$\\tau_{1:K}$'))
g
ggsave(sprintf('posterior_concentration_n%i.pdf',n),plot=g,width=7,height=5)
?ugarchspec
# get the PITs for each of the time series
ugspec = ugarchspec(distribution.model = "sged")
shapResult = rep(NA,1,n_tickers)
X_mat <- matrix(NA,n_dates-1,n_tickers)
for(i in 1:n_tickers){
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
prices <- series$Close
logp = log(prices)
logreturns = diff(logp)[2:length(prices)]
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
#print(fit)
u = pit(fit)
Xnew = qnorm(u)
shapResult[i] = shapiro.test(as.numeric(Xnew))$p.value
X_mat[,i] <- Xnew
}
shapResult
# get the PITs for each of the time series
ugspec = ugarchspec(distribution.model = "ghyp")
shapResult = rep(NA,1,n_tickers)
X_mat <- matrix(NA,n_dates-1,n_tickers)
for(i in 1:n_tickers){
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
prices <- series$Close
logp = log(prices)
logreturns = diff(logp)[2:length(prices)]
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
#print(fit)
u = pit(fit)
Xnew = qnorm(u)
shapResult[i] = shapiro.test(as.numeric(Xnew))$p.value
X_mat[,i] <- Xnew
}
shapResult
# get the PITs for each of the time series
distribution_models <- c('sstd','ghyp')
# get the PITs for each of the time series
distribution_models <- c('sstd','ghyp')
distribution_models
source('~/Dropbox/copula_changepoint/code_git/copula_changepoint/data/yahoo_data/yahoo_data.R')
filename
filename <- sprintf('largestocks2007%s.mat', distribution_model)
filename
writeMat(filename, X_mat=X_mat,dates=index_test,tickers=tickers)
index_test
writeMat(filename, X_mat=X_mat,dates=index_test,tickers=tickers)
writeMat(filename, X_mat=X_mat)
setwd("~/Dropbox/copula_changepoint/code_git/copula_changepoint/data/yahoo_data")
for(i in 1:length(distribution_models)){
distribution_model <- distribution_models[i]
ugspec = ugarchspec(distribution.model = distribution_model)
shapResult = rep(NA,1,n_tickers)
X_mat <- matrix(NA,n_dates-1,n_tickers)
for(i in 1:n_tickers){
series <- series_lst[[i]]
names(series) <- c('Open','High','Low','Close','Volume','Adjusted')
prices <- series$Close
logp = log(prices)
logreturns = diff(logp)[2:length(prices)]
fit = ugarchfit(spec = ugspec, data = logreturns,solver = "solnp")
#print(fit)
u = pit(fit)
Xnew = qnorm(u)
shapResult[i] = shapiro.test(as.numeric(Xnew))$p.value
X_mat[,i] <- Xnew
}
filename <- sprintf('largestocks2007%s.mat', distribution_model)
writeMat(filename, X_mat=X_mat)
}
write.csv(index_test,file='dates.csv')
write.csv(tickers,file='tickers.csv')
shapResult
index_test[[463]]
index_test[[459]]
index_test[[446]]
index_test[[432]]
index_test[[332]]
index_test[[200]]
index_test[[260]]
index_test[[190]]
index_test[[260]]
index_test[[300]]
